Git and GitHub -

Git - Git is a software that helps in versioning out application, i.e., it also helps us to retract to a specific version so that we can undo
any unwanted change. Also it allows multiple user to collaborate simultaneously by providing the features such as branching and merging.

GitHub - GitHub is a web based application which provides user to collaborate the users remotely by storing the repository on remote servers.
--------------------------------------------------------------------------------------------------------------------------------------------

SOME GIT COMMANDS ARE AS FOLLOWS - 
git init ->  this initializes the git repository and also makes the .git folder which has the info about the staging area (index file) and
            also the local repository.

git remote add origin ${repo link} ->   This helps in connecting the remote repo with the local repository.
git remote -v ->    to verify remote.
git add ${file name} -> this add the specific file to the staging area.
git add . ->    this adds all the files to the staging area.
git commit -m ${message} -> this commits the changes to the local git repository.
git push origin ${branch name} ->this pushes the changes to the remote repository.
git push -u origin ${branch name} ->this sets the upstream so that you need not to write the origin again and again.
git clone ${github repo url} ->this clones a particular repository.
git status ->tells us about the status of all the files, i.e., Staged, Modified, Unchanged, Untracked.
git pull origin ${branch name}->this pulls any changes in a particular branch.
git branch -> this retuns the branch you are in (ONLY IF YOU HAVE PUSHED SOMETHING TO IT).
git logs -> this generates the logs about all the commits that have been made along with their hash number.
git reset ${hash code} -> this will change the head of the branch to the hashed commit.
git reset --hard ${hash code} ->this will reflects the changes to the local project as well.
git checkout ${branch name} ->this is used for jumping from one branch to other.
git checkout -b ${new name} ->creates a new branch.
git branch -d ${branch name} ->this deletes a branch.
#NOTE - you cannot checkout from a branch before commiting or stashing the changes.
git diff ${branch name}->this is used to get the differences between two branches.
git merge ${branch name}->this merges two branches.
git rebase ${branch1} -> merges the changes of the branch 1 to every commit of your branch.
To merge changes to the main branch you can also raise a PR so that the owner of the repo can review it
before merging it to the main branch


/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/

Web Fundamentals

APIs are the interface that helps in communcation between two systems.
It also works as a firewall which allows user to only use a specific computation of server via URIs

APIs based on purpose of need is -
Internal API - private use
Open API - Public API
Partner API - Companies use API to coordinate with each other.
Composite API - Combining multiple Data and multiple APIs.

APIs have many Architecture type, some of them are -
RESTful API - Mostly used for application involving CRUD Operations
SOAP API -  uses XML for communcation, It is used when security is the top priority
GraphQL -   uses query params for giving a detailed information to the server that what is the need of the 
            client.
Web Sockets - Bi directional api specially for chatting application perspective.
gRPC - Used for microservices.

principals of RESTful APIs - 
1. Uniformity
2. Client Server Architecture.
3. Stateless
4. Cacheble
5. Layered systems
6. Code on Demand

HTTP is a protocol used for communication over web.
The header attached to the request provides the matadata to the request/ response ex - content type can 
be text or html ot json.
Status code tells us about the response status-
1xx states some information
2xx states sucessfulness
3xx states redirection
4xx states error (client side)
5xx states serverside error.

Best Practices of REST - 
1.Use Nouns not Verbs
2.Use Prural Nouns
3.Version APIs for backword compatibility
  i) URL versioning
  ii) Req Params versioning
  iii) Context negotiation
  iv) Custom Header versioning
4.Use Proper Status code
5.Error Handling
6.Pagination and Filtering
7.Handling Auth
